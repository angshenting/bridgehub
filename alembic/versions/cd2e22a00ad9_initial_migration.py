"""Initial migration

Revision ID: cd2e22a00ad9
Revises: 
Create Date: 2025-07-19 23:33:33.948465

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cd2e22a00ad9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_ratings_date', table_name='ratings')
    op.drop_index('idx_ratings_player_type', table_name='ratings')
    op.drop_table('ratings')
    op.drop_table('import_log')
    op.drop_index('idx_players_legacy_id', table_name='players')
    op.drop_index('idx_players_number', table_name='players')
    op.drop_index('idx_players_organization', table_name='players')
    op.drop_index('idx_players_status', table_name='players')
    op.drop_table('players')
    op.drop_table('subscriptions')
    op.drop_index('idx_sessions_date', table_name='sessions')
    op.drop_index('idx_sessions_event', table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('organizations')
    op.drop_index('idx_results_event', table_name='results')
    op.drop_index('idx_results_player', table_name='results')
    op.drop_index('idx_results_position', table_name='results')
    op.drop_index('idx_results_session', table_name='results')
    op.drop_table('results')
    op.drop_index('idx_hands_board', table_name='hands')
    op.drop_index('idx_hands_session', table_name='hands')
    op.drop_table('hands')
    op.drop_index('idx_events_date', table_name='events')
    op.drop_index('idx_events_organization', table_name='events')
    op.drop_index('idx_events_status', table_name='events')
    op.drop_table('events')
    op.drop_index('idx_masterpoints_date', table_name='masterpoints')
    op.drop_index('idx_masterpoints_event', table_name='masterpoints')
    op.drop_index('idx_masterpoints_player', table_name='masterpoints')
    op.drop_index('idx_masterpoints_type', table_name='masterpoints')
    op.drop_table('masterpoints')
    op.drop_table('contracts')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('contracts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('result_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hand_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('suit', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('doubled', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('declarer', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('tricks', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("declarer::text = ANY (ARRAY['N'::character varying, 'S'::character varying, 'E'::character varying, 'W'::character varying]::text[])", name='contracts_declarer_check'),
    sa.CheckConstraint("doubled::text = ANY (ARRAY[''::character varying, 'X'::character varying, 'XX'::character varying]::text[])", name='contracts_doubled_check'),
    sa.CheckConstraint("suit::text = ANY (ARRAY['C'::character varying, 'D'::character varying, 'H'::character varying, 'S'::character varying, 'NT'::character varying]::text[])", name='contracts_suit_check'),
    sa.CheckConstraint('level >= 1 AND level <= 7', name='contracts_level_check'),
    sa.CheckConstraint('tricks >= 0 AND tricks <= 13', name='contracts_tricks_check'),
    sa.ForeignKeyConstraint(['hand_id'], ['hands.id'], name='contracts_hand_id_fkey'),
    sa.ForeignKeyConstraint(['result_id'], ['results.id'], name='contracts_result_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='contracts_pkey')
    )
    op.create_table('masterpoints',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('award_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('points', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('awarded_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("award_type::text = ANY (ARRAY['local'::character varying, 'national'::character varying, 'regional'::character varying, 'international'::character varying]::text[])", name='masterpoints_award_type_check'),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='masterpoints_event_id_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='masterpoints_organization_id_fkey'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name='masterpoints_player_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='masterpoints_pkey')
    )
    op.create_index('idx_masterpoints_type', 'masterpoints', ['award_type'], unique=False)
    op.create_index('idx_masterpoints_player', 'masterpoints', ['player_id'], unique=False)
    op.create_index('idx_masterpoints_event', 'masterpoints', ['event_id'], unique=False)
    op.create_index('idx_masterpoints_date', 'masterpoints', [sa.text('awarded_date DESC')], unique=False)
    op.create_table('events',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('events_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('legacy_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'planned'::character varying"), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['planned'::character varying, 'active'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])", name='events_status_check'),
    sa.CheckConstraint("type::text = ANY (ARRAY['pairs'::character varying, 'teams'::character varying, 'swiss'::character varying, 'knockout'::character varying, 'round_robin'::character varying, 'bam'::character varying]::text[])", name='events_type_check'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='events_organization_id_fkey'),
    sa.ForeignKeyConstraint(['parent_event_id'], ['events.id'], name='events_parent_event_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='events_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_events_status', 'events', ['status'], unique=False)
    op.create_index('idx_events_organization', 'events', ['organization_id'], unique=False)
    op.create_index('idx_events_date', 'events', [sa.text('start_date DESC')], unique=False)
    op.create_table('hands',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('board_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dealer', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('vulnerability', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('pbn_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("dealer::text = ANY (ARRAY['N'::character varying, 'S'::character varying, 'E'::character varying, 'W'::character varying]::text[])", name='hands_dealer_check'),
    sa.CheckConstraint("vulnerability::text = ANY (ARRAY['None'::character varying, 'NS'::character varying, 'EW'::character varying, 'All'::character varying]::text[])", name='hands_vulnerability_check'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='hands_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='hands_pkey')
    )
    op.create_index('idx_hands_session', 'hands', ['session_id'], unique=False)
    op.create_index('idx_hands_board', 'hands', ['board_number'], unique=False)
    op.create_table('results',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('partner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pair_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('score', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('imp_score', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('vp_score', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True),
    sa.Column('masterpoints_awarded', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='results_event_id_fkey'),
    sa.ForeignKeyConstraint(['partner_id'], ['players.id'], name='results_partner_id_fkey'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name='results_player_id_fkey'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='results_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='results_pkey')
    )
    op.create_index('idx_results_session', 'results', ['session_id'], unique=False)
    op.create_index('idx_results_position', 'results', ['position'], unique=False)
    op.create_index('idx_results_player', 'results', ['player_id'], unique=False)
    op.create_index('idx_results_event', 'results', ['event_id'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('organizations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['club'::character varying, 'region'::character varying, 'national'::character varying, 'international'::character varying]::text[])", name='organizations_type_check'),
    sa.ForeignKeyConstraint(['parent_id'], ['organizations.id'], name='organizations_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('session_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'planned'::character varying"), autoincrement=False, nullable=True),
    sa.Column('boards_played', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('movement_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['planned'::character varying, 'active'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])", name='sessions_status_check'),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='sessions_event_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_index('idx_sessions_event', 'sessions', ['event_id'], unique=False)
    op.create_index('idx_sessions_date', 'sessions', [sa.text('date DESC')], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('expiry', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('fee', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('receipt', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['full'::character varying, 'social'::character varying, 'student'::character varying, 'life'::character varying]::text[])", name='subscriptions_type_check'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name='subscriptions_player_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey')
    )
    op.create_table('players',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('players_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('legacy_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bmid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('wbf_id', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('national_id', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lastname', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('firstname', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mobile', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('homecontact', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('gender', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('birthdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('joindate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("gender = ANY (ARRAY['M'::bpchar, 'F'::bpchar])", name='players_gender_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying]::text[])", name='players_status_check'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='players_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='players_pkey'),
    sa.UniqueConstraint('bmid', name='players_bmid_key'),
    sa.UniqueConstraint('number', name='players_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_players_status', 'players', ['status'], unique=False)
    op.create_index('idx_players_organization', 'players', ['organization_id'], unique=False)
    op.create_index('idx_players_number', 'players', ['number'], unique=False)
    op.create_index('idx_players_legacy_id', 'players', ['legacy_id'], unique=False)
    op.create_table('import_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('import_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('records_imported', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('errors_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['success'::character varying, 'failure'::character varying, 'partial'::character varying]::text[])", name='import_log_status_check'),
    sa.PrimaryKeyConstraint('id', name='import_log_pkey')
    )
    op.create_table('ratings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('mu', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=False),
    sa.Column('sigma', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=False),
    sa.Column('mu_delta', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('sigma_delta', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('days_since_last', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_interval', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("rating_type::text = ANY (ARRAY['openskill'::character varying, 'elo'::character varying, 'ngs'::character varying]::text[])", name='ratings_rating_type_check'),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='ratings_event_id_fkey'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name='ratings_player_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ratings_pkey')
    )
    op.create_index('idx_ratings_player_type', 'ratings', ['player_id', 'rating_type'], unique=False)
    op.create_index('idx_ratings_date', 'ratings', [sa.text('date DESC')], unique=False)
    # ### end Alembic commands ###
